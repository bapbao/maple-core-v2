// SPDX-License-Identifier: BUSL-1.1
pragma solidity 0.8.7;

import { TestBaseWithAssertions } from "../../contracts/utilities/TestBaseWithAssertions.sol";

import { Address, console } from "../../modules/contract-test-utils/contracts/test.sol";

import { Refinancer }        from "../../modules/loan-v401/contracts/Refinancer.sol";
import { MapleLoan as Loan } from "../../modules/loan-v401/contracts/MapleLoan.sol";

import { LoanHandlerWithImpairment as LoanHandler } from "../invariants/actors/LoanHandlerWithImpairment.sol";
import { LpHandler }                                from "../invariants/actors/LpHandler.sol";

contract RegressionTest is TestBaseWithAssertions {

    uint256 constant public NUM_BORROWERS = 5;
    uint256 constant public NUM_LPS       = 10;
    uint256 constant public MAX_NUM_LOANS = 50;

    uint256 setTimestamps;

    address[] public borrowers;

    uint256[] timestamps;

    uint256 public currentTimestamp;

    LoanHandler loanHandler;
    LpHandler   lpHandler;

    function setUp() public override {
        super.setUp();

        currentTimestamp = block.timestamp;

        loanHandler = new LoanHandler({
            collateralAsset_: address(collateralAsset),
            feeManager_:      address(feeManager),
            fundsAsset_:      address(fundsAsset),
            globals_:         address(globals),
            governor_:        governor,
            loanFactory_:     loanFactory,
            poolManager_:     address(poolManager),
            testContract_:    address(this),
            numBorrowers_:    NUM_BORROWERS,
            maxLoans_:        MAX_NUM_LOANS
        });

        lpHandler = new LpHandler(address(pool), address(this), NUM_LPS);

    }

    function test_regression_invariantUnderflow() external {
        // Call sequence from Invariant failure
        lpHandler.mint(115792089237316195423570985008687907853269984665640564039457584007913129639932, 2);
        loanHandler.impairLoan(44350351663014801330081);
        lpHandler.requestRedeem(397033724884604987223658894746, 6507598289383296464921439);
        loanHandler.createLoanAndFund(114796939126572464485669432463848173248608720792236492753059967819167245740652, [uint256(106907381517790884880754690905), 2349278223969267532769107923, 640260884040502728162154478835097111543629976135387], [uint256(785537843850272561316681354178), 46630547469820653808839429456, 6619188922239243199420517207], [uint256(543512311206629033446932892234), 8847567179, 146140300526861301476772940662, 3644914473], [uint256(17929445818943082332735174), 1010502134406903469363153124845]);
        loanHandler.impairLoan(115792089237316195423570985008687907853269984665640564039457584007913129639932);
        loanHandler.makePayment(75851697028000881919958643764, 413238542605307835987129885330);
        lpHandler.transfer(101522286204020, 1406799742659732262559566395877, 157860500191220028281410144271);
        loanHandler.createLoanAndFund(8401699694758306166653255626255935736101, [0, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 1], [115792089237316195423570985008687907853269984665640564039457584007913129639932, 115792089237316195423570985008687907853269984665640564039457584007913129639932, 115792089237316195423570985008687907853269984665640564039457584007913129639933], [66224125536546043854264473798591027590597146, 0, 1, 115792089237316195423570985008687907853269984665640564039457584007913129639935], [uint256(244472613489577), 27]);
        lpHandler.transfer(6691986, 770652846330056877154171392421, 2642565738627942491066117723);
        lpHandler.redeem(801956298525841076504167206429, 559778913040469462420269575404);
        loanHandler.createLoanAndFund(1616936573489501314788725176, [1426583892562177740896706784061819031185270371534, 75123127377546475004515100404757465150498283020140544356401496015277451063157, 10409847734573492600588489031], [uint256(18614), 306968548690421679171432204225, 287847789275927479339299340710], [uint256(12384652803191552714120351268), 81469846573946462217443268057, 160985925644006886282423007177, 74528947924075142970262211758], [uint256(384519959837479436951743569748), 1273298547451317291572698717349]);
        loanHandler.impairLoan(1005105495959509108520132480928);
        loanHandler.createLoanAndFund(3078851091351306631025252178023937503094418893714472455783587368, [115792089237316195423570985008687907853269984665640564039457584007913129639934, 115792089237316195423570985008687907853269984665640564039457584007913129639932, 37470383297173158269311465048562582574146287266770473882774584], [uint256(3), 27137747056578965031106417544857149570927707359, 2121896], [15087539978231971997469108481822816171264733010343234119931716740851, 0, 115792089237316195423570985008687907853269984665640564039457584007913129639934, 53075600036485587846636], [115792089237316195423570985008687907853269984665640564039457584007913129639933, 24818499538512579947190404110636926196293867]);
        loanHandler.impairLoan(2);
        loanHandler.warp(38230389647743939495244325858905447309147223230622238983375993497123197918336);
        lpHandler.deposit(60472578317871498138980335157, 30608509082820004819302880341);
        lpHandler.mint(115792089237316195423570985008687907853269984665640564039457584007913129639933, 3);
        loanHandler.impairLoan(10396018190718698675883155684);
        lpHandler.mint(1312310263258426918020350935948244410934178351589179290084759123105293191086, 20879356919057808771226889809326150633184843464752023369069);
        lpHandler.mint(115792089237316195423570985008687907853269984665640564039457584007913129639935, 115792089237316195423570985008687907853269984665640564039457584007913129639935);
        loanHandler.impairLoan(763435360601035026748909735004334569728838918957571330132245425851315113);
        loanHandler.impairLoan(0);
        loanHandler.warp(264520782934852711004161109391);
        lpHandler.transfer(115792089237316195423570985008687907853269984665640564039457584007913129639934, 1, 115792089237316195423570985008687907853269984665640564039457584007913129639935);
        lpHandler.mint(0, 0);
        lpHandler.transfer(0, 0, 0);
        loanHandler.createLoanAndFund(3201258693855430109322278499069099483410482522251631909434912979231980337, [115792089237316195423570985008687907853269984665640564039457584007913129639935, 2, 11119437186627302269542335164011202973696706792986950147327192944577555455628], [75560293597358723689248735902386325496025215419059693779346812052617142, 50626669882430801443810771473712233310477096667727127105991506212935, 115792089237316195423570985008687907853269984665640564039457584007913129639932], [4090842471, 57732611698, 1212014757167175835646212778855113, 115792089237316195423570985008687907853269984665640564039457584007913129639934], [9393837659778366403130741252202526045708337, 115792089237316195423570985008687907853269984665640564039457584007913129639932]);
        loanHandler.makePayment(2, 0);
        loanHandler.warp(1557825080171877650201218222749);
        loanHandler.createLoanAndFund(788592980324803080751255351140, [uint256(28134015396116571027250105), 97850179565457559011930271133, 1113486003762598216082904519], [uint256(336786157425117845501880146651), 506739823344146914956252635695418881286715103369101, 627010024452506538216978768683], [uint256(1611323228910564887461018648), 668059610415072165964683749066, 464497679135098940082235618429, 12189897980170934158766169], [uint256(508917316068556479399763905687685117595384984403244523373617604), 5161782274077736604314202533538158]);
        loanHandler.impairLoan(4002118946038890892442752730697480903907904188935791738581151146733639664673);
        lpHandler.requestRedeem(1244733120523767964540156319984354925254217630574713562, 1021);
        lpHandler.requestRedeem(52062757973702150888997066765, 1880948440793063069841194253);
        lpHandler.transfer(0, 287480662, 114893317515056911963118225676);
        lpHandler.transfer(453090904671981049585174892398, 1778151024016158662369726920388264771781698238855204170475354, 1365057401027503964254452883357);
        lpHandler.removeShares(305145567, 389916450018548770961817517);
        loanHandler.warp(424735860549742279189702447486069367);
        loanHandler.warp(1);
        loanHandler.createLoanAndFund(39715497062526812955446983375365149964368962365979435337702127050175164337533, [uint256(660463361211145834626675618185), 1913066884651983527011775809, 43628874986724479358036289267593548183891987517188362244978840174607], [uint256(21403733298735987145886620241), 14303046159769395381932, 589840824607043786861518174323], [uint256(264797360571991983775069784649), 1481766516, 1200216556866036506887449079444, 205426420718391987701697242224], [uint256(787778062241400479289956550), 391699183545274408452281082999]);
        lpHandler.removeShares(15573715860040936000439, 2);
        loanHandler.warp(115792089237316195423570985008687907853269984665640564039457584007913129639932);
        lpHandler.transfer(1181469158600395853667832859, 113506073960462886799830623156515562873419723020245133871356187445333788015197, 165696425670485307126876209);
        lpHandler.deposit(1172886258762695558424956821928, 65844049007684249298844961503963021575099462606924819885672276700140488684176);
        loanHandler.warp(115792089237316195423570985008687907853269984665640564039457584007913129639933);
        loanHandler.impairLoan(193806711104);
        loanHandler.impairLoan(4906195103158551126666561575);
        lpHandler.mint(28227851, 56020533713132815315);
        lpHandler.mint(623164679258853562191706936523, 5368462128642067058116891939425511478380543830019745);
        lpHandler.transfer(32376791915107311, 2, 115792089237316195423570985008687907853269984665640564039457584007913129639935);
        lpHandler.removeShares(115792089237316195423570985008687907853269984665640564039457584007913129639935, 3735942818781804275196814781648037421624177928936583043830415654101305);
        loanHandler.warp(6360589863266553022220795709);
        lpHandler.redeem(50362594992404224659247000418, 100009953944915);
        loanHandler.createLoanAndFund(65049353376588800041895846039880725895065656577440390396272591927778111111038, [uint256(486047086533972246082505983), 4733834772743390966619575213, 4581848171215498944215088223297965843531271776837304332], [uint256(565422351562284440031357319945), 165675193499335214749540834076, 483250944604236571738831412677], [uint256(375129413480216946799086651249), 131791003964600062377497980235916771328, 9220856832, 1154544869362910424771916186896], [uint256(217346999725153912548040338791), 260492094358060539101739854868]);
        lpHandler.deposit(204126060533652724500508477932743, 115792089237316195423570985008687907853269984665640564039457584007913129639932);
        loanHandler.impairLoan(115792089237316195423570985008687907853269984665640564039457584007913129639932);
        lpHandler.requestRedeem(0, 3);
        loanHandler.warp(2);
        loanHandler.impairLoan(33112808169);

        assertEq(loanManager.unrealizedLosses(),      139457175286305819993673379855);
        assertEq(loanManager.assetsUnderManagement(), 139457175286305819993673379853);

        assertEq(loanManager.unrealizedLosses() - loanManager.assetsUnderManagement(), 2);  // UL > AUM due to rounding

        // Assert that although the original invariant failed, the protocol still works. The values will be constrained in the handler contracts.
        lpHandler.deposit(1000, 1000);
        lpHandler.mint(1000, 1000);
        lpHandler.transfer(1000, 1000, 1000);
        lpHandler.requestRedeem(1000, 1000);
        lpHandler.redeem(100000, 10000);

        loanHandler.createLoanAndFund(1000, [uint256(1000), 1000, 1000], [uint256(1000), 1000, 1000], [uint256(1000), 1000, 1000, 1000], [uint256(1000), 1000]);
        loanHandler.warp(1000);
        loanHandler.impairLoan(1000);
    }

    function setCurrentTimestamp(uint256 currentTimestamp_) external {
        timestamps.push(currentTimestamp_);
        setTimestamps++;
        currentTimestamp = currentTimestamp_;
    }

}
